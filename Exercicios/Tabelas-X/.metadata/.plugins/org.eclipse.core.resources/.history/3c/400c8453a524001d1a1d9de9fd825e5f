package maven.demo.dao;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import maven.demo.model.Usuario;

public class UsuarioDAO extends DAO {
	
	public UsuarioDAO() {
		super();
		conectar();
	}

	public void finalize() {
		close();
	}
	
	
	public boolean insert(Usuario usuario) {
		boolean status = false;
		try {  
			String sql = "INSERT INTO usuario (codigo, login, senha, sexo) VALUES (?, ?, ?, ?);";
			PreparedStatement pst = conexao.prepareStatement(sql);
			pst.setInt(1, usuario.getCodigo());
			pst.setString(2, usuario.getLogin());
			pst.setString(3, usuario.getSenha());
			pst.setString(4, "" + usuario.getSexo());
			pst.executeUpdate();
			pst.close();
			status = true;
		} catch (SQLException u) {  
			throw new RuntimeException(u);
		}
		return status;
	}

	
	public Usuario get(int codigo) {
		Usuario usuario = null;
		
		try {
			String sql = "SELECT * FROM usuario WHERE codigo=?";
			PreparedStatement pst = conexao.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
			pst.setInt(1, codigo);
			ResultSet rs = pst.executeQuery(sql);	
	        if(rs.next()){            
	        	 usuario = new Usuario(rs.getInt("codigo"), rs.getString("login"), rs.getString("senha"), rs.getString("sexo").charAt(0));
	        }
	        pst.close();
		} catch (Exception e) {
			System.err.println(e.getMessage());
		}
		return usuario;
	}
	
	public int getLastCode() {
		int code = 0;
		try {
			String sql = "SELECT * FROM usuario ORDER BY codigo DESC LIMIT 1";
			PreparedStatement pst = conexao.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
			ResultSet rs = pst.executeQuery();
			if(rs.next()) {
				code = rs.getInt("codigo");
			}
			pst.close();
		} catch (Exception e) {
			System.err.println(e.getMessage());
		}
		return code;
	}
	
	
	public List<Usuario> get() {
		return get("");
	}

	
	public List<Usuario> getOrderByCodigo() {
		return get("codigo");		
	}
	
	
	public List<Usuario> getOrderByLogin() {
		return get("login");		
	}
	
	
	public List<Usuario> getOrderBySexo() {
		return get("sexo");		
	}
	
	
	public List<Usuario> get(String orderBy) {	
	
		List<Usuario> usuarios = new ArrayList<Usuario>();
		
		try {
			String sql;
			PreparedStatement pst;
			if(orderBy.trim().length() == 0 || orderBy == null) {
				sql = "SELECT * FROM usuario";
				pst = conexao.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
			} else {
				sql = "SELECT * FROM usuario ORDER BY '?'";
				pst = conexao.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
				pst.setString(1, orderBy);
			}
			
			ResultSet rs = pst.executeQuery();	           
	        while(rs.next()) {
	        	Usuario u = new Usuario(rs.getInt("codigo"), rs.getString("login"), rs.getString("senha"), rs.getString("sexo").charAt(0));
	            usuarios.add(u);
	        }
	        pst.close();
		} catch (Exception e) {
			System.err.println(e.getMessage());
		}
		return usuarios;
	}


	public List<Usuario> getSexoMasculino() {
		List<Usuario> usuarios = new ArrayList<Usuario>();
		
		try {
			Statement st = conexao.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
			String sql = "SELECT * FROM usuario WHERE usuario.sexo LIKE 'M'";
			ResultSet rs = st.executeQuery(sql);	           
	        while(rs.next()) {	            	
	        	Usuario u = new Usuario(rs.getInt("codigo"), rs.getString("login"), rs.getString("senha"), rs.getString("sexo").charAt(0));
	            usuarios.add(u);
	        }
	        st.close();
		} catch (Exception e) {
			System.err.println(e.getMessage());
		}
		return usuarios;
	}
	
	
	public boolean update(Usuario usuario) {
		boolean status = false;
		try {  
			String sql = "UPDATE usuario SET login = '?', senha = '?', sexo = '?' WHERE codigo = ?";
			PreparedStatement pst = conexao.prepareStatement(sql);
			pst.setString(1, usuario.getLogin());
			pst.setString(2, usuario.getSenha());
			pst.setString(3, ""+usuario.getSexo());
			pst.setInt(4, usuario.getCodigo());
			System.out.println(sql);
			pst.executeUpdate();
			pst.close();
			status = true;
		} catch (SQLException u) {  
			throw new RuntimeException(u);
		}
		return status;
	}
	
	public boolean delete(int codigo) {
		boolean status = false;
		try {  
			String sql = "DELETE FROM usuario WHERE codigo = ?";
			PreparedStatement pst = conexao.prepareStatement(sql);
			pst.setInt(1,  codigo);
			pst.executeUpdate();
			pst.close();
			status = true;
		} catch (SQLException u) {  
			throw new RuntimeException(u);
		}
		return status;
	}
	
	
	public boolean autenticar(String login, String senha) {
		boolean resp = false;
		
		try {
			String sql = "SELECT * FROM usuario WHERE login LIKE '?' AND senha LIKE '?'";
			PreparedStatement pst = conexao.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
			pst.setString(1, login);
			pst.setString(2, senha);
			ResultSet rs = pst.executeQuery();
			resp = rs.next();
	        pst.close();
		} catch (Exception e) {
			System.err.println(e.getMessage());
		}
		return resp;
	}	
}